generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model reviews {
  id             Int     @id @default(autoincrement())
  reviewImageUrl String
  title          String
  description    String
  location       String
  ratingAvg      Float
  category       String
  verified       Boolean @default(false)
  userId         String?
  User           users?  @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  comments[]
}

model comments {
  id             Int       @id @default(autoincrement())
  title          String
  comment        String
  commentRating  Float
  experienceDate DateTime?
  userId         String
  User           users     @relation(fields: [userId], references: [id], onDelete: Cascade)
  reviewId       Int
  review         reviews   @relation(fields: [reviewId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?   @unique
  avatarUrl    String?
  bio          String?
  sessions     Session[]

  createdAt DateTime @default(now())
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model jobs {
  id               Int      @id @default(autoincrement())
  title            String
  type             String
  description      String
  companyLogo      String?
  location         String?
  salary           Int
  createdAt        DateTime @default(now())
  updatedAt        DateTime
  applicationEmail String?
  applicationUrl   String?
  companyName      String
  locationType     String
  slug             String   @unique
  approved         Boolean  @default(false)
}

model posts {
  id        String   @id
  content   String
  userId    String
  createdAt DateTime @default(now())
  users     users    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model users {
  id        String     @id
  clerkId   String?    @unique
  email     String     @unique
  name      String?
  lastName  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime
  userImage String?
  posts     posts[]
  comments  comments[]
  reviews   reviews[]
}
